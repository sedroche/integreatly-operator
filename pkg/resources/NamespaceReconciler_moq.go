// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package resources

import (
	"context"
	"github.com/operator-framework/operator-lifecycle-manager/pkg/lib/ownerutil"
	"k8s.io/api/core/v1"
	"sync"
)

var (
	lockNamespaceReconcilerMockReconcile sync.RWMutex
)

// Ensure, that NamespaceReconcilerMock does implement NamespaceReconciler.
// If this is not the case, regenerate this file with moq.
var _ NamespaceReconciler = &NamespaceReconcilerMock{}

// NamespaceReconcilerMock is a mock implementation of NamespaceReconciler.
//
//     func TestSomethingThatUsesNamespaceReconciler(t *testing.T) {
//
//         // make and configure a mocked NamespaceReconciler
//         mockedNamespaceReconciler := &NamespaceReconcilerMock{
//             ReconcileFunc: func(ctx context.Context, ns *v1.Namespace, owner ownerutil.Owner) (*v1.Namespace, error) {
// 	               panic("mock out the Reconcile method")
//             },
//         }
//
//         // use mockedNamespaceReconciler in code that requires NamespaceReconciler
//         // and then make assertions.
//
//     }
type NamespaceReconcilerMock struct {
	// ReconcileFunc mocks the Reconcile method.
	ReconcileFunc func(ctx context.Context, ns *v1.Namespace, owner ownerutil.Owner) (*v1.Namespace, error)

	// calls tracks calls to the methods.
	calls struct {
		// Reconcile holds details about calls to the Reconcile method.
		Reconcile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ns is the ns argument value.
			Ns *v1.Namespace
			// Owner is the owner argument value.
			Owner ownerutil.Owner
		}
	}
}

// Reconcile calls ReconcileFunc.
func (mock *NamespaceReconcilerMock) Reconcile(ctx context.Context, ns *v1.Namespace, owner ownerutil.Owner) (*v1.Namespace, error) {
	if mock.ReconcileFunc == nil {
		panic("NamespaceReconcilerMock.ReconcileFunc: method is nil but NamespaceReconciler.Reconcile was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Ns    *v1.Namespace
		Owner ownerutil.Owner
	}{
		Ctx:   ctx,
		Ns:    ns,
		Owner: owner,
	}
	lockNamespaceReconcilerMockReconcile.Lock()
	mock.calls.Reconcile = append(mock.calls.Reconcile, callInfo)
	lockNamespaceReconcilerMockReconcile.Unlock()
	return mock.ReconcileFunc(ctx, ns, owner)
}

// ReconcileCalls gets all the calls that were made to Reconcile.
// Check the length with:
//     len(mockedNamespaceReconciler.ReconcileCalls())
func (mock *NamespaceReconcilerMock) ReconcileCalls() []struct {
	Ctx   context.Context
	Ns    *v1.Namespace
	Owner ownerutil.Owner
} {
	var calls []struct {
		Ctx   context.Context
		Ns    *v1.Namespace
		Owner ownerutil.Owner
	}
	lockNamespaceReconcilerMockReconcile.RLock()
	calls = mock.calls.Reconcile
	lockNamespaceReconcilerMockReconcile.RUnlock()
	return calls
}
