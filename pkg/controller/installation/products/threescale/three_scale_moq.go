// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package threescale

import (
	"net/http"
	"sync"
)

var (
	lockThreeScaleInterfaceMockAddSSOIntegration            sync.RWMutex
	lockThreeScaleInterfaceMockAddUser                      sync.RWMutex
	lockThreeScaleInterfaceMockGetAdminUser                 sync.RWMutex
	lockThreeScaleInterfaceMockGetUsers                     sync.RWMutex
	lockThreeScaleInterfaceMockSetNamespace                 sync.RWMutex
	lockThreeScaleInterfaceMockUpdateAdminPortalUserDetails sync.RWMutex
)

// Ensure, that ThreeScaleInterfaceMock does implement ThreeScaleInterface.
// If this is not the case, regenerate this file with moq.
var _ ThreeScaleInterface = &ThreeScaleInterfaceMock{}

// ThreeScaleInterfaceMock is a mock implementation of ThreeScaleInterface.
//
//     func TestSomethingThatUsesThreeScaleInterface(t *testing.T) {
//
//         // make and configure a mocked ThreeScaleInterface
//         mockedThreeScaleInterface := &ThreeScaleInterfaceMock{
//             AddSSOIntegrationFunc: func(data map[string]string, accessToken string) (*http.Response, error) {
// 	               panic("mock out the AddSSOIntegration method")
//             },
//             AddUserFunc: func(username string, email string, password string, accessToken string) (*http.Response, error) {
// 	               panic("mock out the AddUser method")
//             },
//             GetAdminUserFunc: func(accessToken string) (*User, error) {
// 	               panic("mock out the GetAdminUser method")
//             },
//             GetUsersFunc: func(accessToken string) (*Users, error) {
// 	               panic("mock out the GetUsers method")
//             },
//             SetNamespaceFunc: func(ns string)  {
// 	               panic("mock out the SetNamespace method")
//             },
//             UpdateAdminPortalUserDetailsFunc: func(username string, email string, accessToken string) (*http.Response, error) {
// 	               panic("mock out the UpdateAdminPortalUserDetails method")
//             },
//         }
//
//         // use mockedThreeScaleInterface in code that requires ThreeScaleInterface
//         // and then make assertions.
//
//     }
type ThreeScaleInterfaceMock struct {
	// AddSSOIntegrationFunc mocks the AddSSOIntegration method.
	AddSSOIntegrationFunc func(data map[string]string, accessToken string) (*http.Response, error)

	// AddUserFunc mocks the AddUser method.
	AddUserFunc func(username string, email string, password string, accessToken string) (*http.Response, error)

	// GetAdminUserFunc mocks the GetAdminUser method.
	GetAdminUserFunc func(accessToken string) (*User, error)

	// GetUsersFunc mocks the GetUsers method.
	GetUsersFunc func(accessToken string) (*Users, error)

	// SetNamespaceFunc mocks the SetNamespace method.
	SetNamespaceFunc func(ns string)

	// UpdateAdminPortalUserDetailsFunc mocks the UpdateAdminPortalUserDetails method.
	UpdateAdminPortalUserDetailsFunc func(username string, email string, accessToken string) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddSSOIntegration holds details about calls to the AddSSOIntegration method.
		AddSSOIntegration []struct {
			// Data is the data argument value.
			Data map[string]string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// AddUser holds details about calls to the AddUser method.
		AddUser []struct {
			// Username is the username argument value.
			Username string
			// Email is the email argument value.
			Email string
			// Password is the password argument value.
			Password string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// GetAdminUser holds details about calls to the GetAdminUser method.
		GetAdminUser []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// GetUsers holds details about calls to the GetUsers method.
		GetUsers []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// SetNamespace holds details about calls to the SetNamespace method.
		SetNamespace []struct {
			// Ns is the ns argument value.
			Ns string
		}
		// UpdateAdminPortalUserDetails holds details about calls to the UpdateAdminPortalUserDetails method.
		UpdateAdminPortalUserDetails []struct {
			// Username is the username argument value.
			Username string
			// Email is the email argument value.
			Email string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
	}
}

// AddSSOIntegration calls AddSSOIntegrationFunc.
func (mock *ThreeScaleInterfaceMock) AddSSOIntegration(data map[string]string, accessToken string) (*http.Response, error) {
	if mock.AddSSOIntegrationFunc == nil {
		panic("ThreeScaleInterfaceMock.AddSSOIntegrationFunc: method is nil but ThreeScaleInterface.AddSSOIntegration was just called")
	}
	callInfo := struct {
		Data        map[string]string
		AccessToken string
	}{
		Data:        data,
		AccessToken: accessToken,
	}
	lockThreeScaleInterfaceMockAddSSOIntegration.Lock()
	mock.calls.AddSSOIntegration = append(mock.calls.AddSSOIntegration, callInfo)
	lockThreeScaleInterfaceMockAddSSOIntegration.Unlock()
	return mock.AddSSOIntegrationFunc(data, accessToken)
}

// AddSSOIntegrationCalls gets all the calls that were made to AddSSOIntegration.
// Check the length with:
//     len(mockedThreeScaleInterface.AddSSOIntegrationCalls())
func (mock *ThreeScaleInterfaceMock) AddSSOIntegrationCalls() []struct {
	Data        map[string]string
	AccessToken string
} {
	var calls []struct {
		Data        map[string]string
		AccessToken string
	}
	lockThreeScaleInterfaceMockAddSSOIntegration.RLock()
	calls = mock.calls.AddSSOIntegration
	lockThreeScaleInterfaceMockAddSSOIntegration.RUnlock()
	return calls
}

// AddUser calls AddUserFunc.
func (mock *ThreeScaleInterfaceMock) AddUser(username string, email string, password string, accessToken string) (*http.Response, error) {
	if mock.AddUserFunc == nil {
		panic("ThreeScaleInterfaceMock.AddUserFunc: method is nil but ThreeScaleInterface.AddUser was just called")
	}
	callInfo := struct {
		Username    string
		Email       string
		Password    string
		AccessToken string
	}{
		Username:    username,
		Email:       email,
		Password:    password,
		AccessToken: accessToken,
	}
	lockThreeScaleInterfaceMockAddUser.Lock()
	mock.calls.AddUser = append(mock.calls.AddUser, callInfo)
	lockThreeScaleInterfaceMockAddUser.Unlock()
	return mock.AddUserFunc(username, email, password, accessToken)
}

// AddUserCalls gets all the calls that were made to AddUser.
// Check the length with:
//     len(mockedThreeScaleInterface.AddUserCalls())
func (mock *ThreeScaleInterfaceMock) AddUserCalls() []struct {
	Username    string
	Email       string
	Password    string
	AccessToken string
} {
	var calls []struct {
		Username    string
		Email       string
		Password    string
		AccessToken string
	}
	lockThreeScaleInterfaceMockAddUser.RLock()
	calls = mock.calls.AddUser
	lockThreeScaleInterfaceMockAddUser.RUnlock()
	return calls
}

// GetAdminUser calls GetAdminUserFunc.
func (mock *ThreeScaleInterfaceMock) GetAdminUser(accessToken string) (*User, error) {
	if mock.GetAdminUserFunc == nil {
		panic("ThreeScaleInterfaceMock.GetAdminUserFunc: method is nil but ThreeScaleInterface.GetAdminUser was just called")
	}
	callInfo := struct {
		AccessToken string
	}{
		AccessToken: accessToken,
	}
	lockThreeScaleInterfaceMockGetAdminUser.Lock()
	mock.calls.GetAdminUser = append(mock.calls.GetAdminUser, callInfo)
	lockThreeScaleInterfaceMockGetAdminUser.Unlock()
	return mock.GetAdminUserFunc(accessToken)
}

// GetAdminUserCalls gets all the calls that were made to GetAdminUser.
// Check the length with:
//     len(mockedThreeScaleInterface.GetAdminUserCalls())
func (mock *ThreeScaleInterfaceMock) GetAdminUserCalls() []struct {
	AccessToken string
} {
	var calls []struct {
		AccessToken string
	}
	lockThreeScaleInterfaceMockGetAdminUser.RLock()
	calls = mock.calls.GetAdminUser
	lockThreeScaleInterfaceMockGetAdminUser.RUnlock()
	return calls
}

// GetUsers calls GetUsersFunc.
func (mock *ThreeScaleInterfaceMock) GetUsers(accessToken string) (*Users, error) {
	if mock.GetUsersFunc == nil {
		panic("ThreeScaleInterfaceMock.GetUsersFunc: method is nil but ThreeScaleInterface.GetUsers was just called")
	}
	callInfo := struct {
		AccessToken string
	}{
		AccessToken: accessToken,
	}
	lockThreeScaleInterfaceMockGetUsers.Lock()
	mock.calls.GetUsers = append(mock.calls.GetUsers, callInfo)
	lockThreeScaleInterfaceMockGetUsers.Unlock()
	return mock.GetUsersFunc(accessToken)
}

// GetUsersCalls gets all the calls that were made to GetUsers.
// Check the length with:
//     len(mockedThreeScaleInterface.GetUsersCalls())
func (mock *ThreeScaleInterfaceMock) GetUsersCalls() []struct {
	AccessToken string
} {
	var calls []struct {
		AccessToken string
	}
	lockThreeScaleInterfaceMockGetUsers.RLock()
	calls = mock.calls.GetUsers
	lockThreeScaleInterfaceMockGetUsers.RUnlock()
	return calls
}

// SetNamespace calls SetNamespaceFunc.
func (mock *ThreeScaleInterfaceMock) SetNamespace(ns string) {
	if mock.SetNamespaceFunc == nil {
		panic("ThreeScaleInterfaceMock.SetNamespaceFunc: method is nil but ThreeScaleInterface.SetNamespace was just called")
	}
	callInfo := struct {
		Ns string
	}{
		Ns: ns,
	}
	lockThreeScaleInterfaceMockSetNamespace.Lock()
	mock.calls.SetNamespace = append(mock.calls.SetNamespace, callInfo)
	lockThreeScaleInterfaceMockSetNamespace.Unlock()
	mock.SetNamespaceFunc(ns)
}

// SetNamespaceCalls gets all the calls that were made to SetNamespace.
// Check the length with:
//     len(mockedThreeScaleInterface.SetNamespaceCalls())
func (mock *ThreeScaleInterfaceMock) SetNamespaceCalls() []struct {
	Ns string
} {
	var calls []struct {
		Ns string
	}
	lockThreeScaleInterfaceMockSetNamespace.RLock()
	calls = mock.calls.SetNamespace
	lockThreeScaleInterfaceMockSetNamespace.RUnlock()
	return calls
}

// UpdateAdminPortalUserDetails calls UpdateAdminPortalUserDetailsFunc.
func (mock *ThreeScaleInterfaceMock) UpdateAdminPortalUserDetails(username string, email string, accessToken string) (*http.Response, error) {
	if mock.UpdateAdminPortalUserDetailsFunc == nil {
		panic("ThreeScaleInterfaceMock.UpdateAdminPortalUserDetailsFunc: method is nil but ThreeScaleInterface.UpdateAdminPortalUserDetails was just called")
	}
	callInfo := struct {
		Username    string
		Email       string
		AccessToken string
	}{
		Username:    username,
		Email:       email,
		AccessToken: accessToken,
	}
	lockThreeScaleInterfaceMockUpdateAdminPortalUserDetails.Lock()
	mock.calls.UpdateAdminPortalUserDetails = append(mock.calls.UpdateAdminPortalUserDetails, callInfo)
	lockThreeScaleInterfaceMockUpdateAdminPortalUserDetails.Unlock()
	return mock.UpdateAdminPortalUserDetailsFunc(username, email, accessToken)
}

// UpdateAdminPortalUserDetailsCalls gets all the calls that were made to UpdateAdminPortalUserDetails.
// Check the length with:
//     len(mockedThreeScaleInterface.UpdateAdminPortalUserDetailsCalls())
func (mock *ThreeScaleInterfaceMock) UpdateAdminPortalUserDetailsCalls() []struct {
	Username    string
	Email       string
	AccessToken string
} {
	var calls []struct {
		Username    string
		Email       string
		AccessToken string
	}
	lockThreeScaleInterfaceMockUpdateAdminPortalUserDetails.RLock()
	calls = mock.calls.UpdateAdminPortalUserDetails
	lockThreeScaleInterfaceMockUpdateAdminPortalUserDetails.RUnlock()
	return calls
}
